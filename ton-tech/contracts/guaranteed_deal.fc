#pragma version >=0.2.0;

#include "imports/stdlib.fc";
#include "imports/params.fc";
#include "imports/constants.fc";
#include "imports/op-codes.fc";
#include "imports/utils.fc";

;; Storage
;; storage#_ seller:MsgAddress buyer:MsgAddress guarantor:MsgAddress amount:Coins payment_type:uint8 jetton_wallet:MsgAddress jetton_master:MsgAddress royalty:Coins state:uint8 = Storage;
(int, slice, slice, slice, int, int, slice, slice, int, int) load_data() inline {
    slice ds = get_data().begin_parse();
    return (
        ds~load_uint(8), ;; storage tag
        ds~load_msg_addr(), ;; seller
        ds~load_msg_addr(), ;; buyer
        ds~load_msg_addr(), ;; guarantor
        ds~load_coins(), ;; amount
        ds~load_uint(8), ;; payment_type (0 for TON, 1 for Jetton)
        ds~load_msg_addr(), ;; jetton_wallet
        ds~load_msg_addr(), ;; jetton_master
        ds~load_coins(), ;; royalty
        ds~load_uint(8) ;; state
    );
}

() save_data(int tag, slice seller, slice buyer, slice guarantor, int amount, int payment_type, slice jetton_wallet, slice jetton_master, int royalty, int state) impure inline {
    set_data(begin_cell()
        .store_uint(tag, 8)
        .store_slice(seller)
        .store_slice(buyer)
        .store_slice(guarantor)
        .store_coins(amount)
        .store_uint(payment_type, 8)
        .store_slice(jetton_wallet)
        .store_slice(jetton_master)
        .store_coins(royalty)
        .store_uint(state, 8)
        .end_cell());
}

;; Get methods
int get_payment_type() method_id {
    (int tag, slice seller, slice buyer, slice guarantor, int amount, int payment_type, slice jetton_wallet, slice jetton_master, int royalty, int state) = load_data();
    return payment_type;
}

int get_state() method_id {
    (int tag, slice seller, slice buyer, slice guarantor, int amount, int payment_type, slice jetton_wallet, slice jetton_master, int royalty, int state) = load_data();
    return state;
}

;; Contract deployment
() recv_internal(int msg_value, cell in_msg_full, slice in_msg_body) impure {
    if (in_msg_body.slice_empty?()) { ;; ignore empty messages
        return ();
    }

    slice cs = in_msg_full.begin_parse();
    int flags = cs~load_uint(4);
    if (flags & 1) { ;; ignore all bounced messages
        return ();
    }
    slice sender_address = cs~load_msg_addr();

    int op = in_msg_body~load_uint(32);
    int query_id = in_msg_body~load_uint(64);

    if (op == op::deploy()) {
        throw_unless(73, equal_slices(sender_address, my_address())); ;; Only contract owner can deploy
        
        slice seller = in_msg_body~load_msg_addr();
        slice guarantor = in_msg_body~load_msg_addr();
        int amount = in_msg_body~load_coins();
        int payment_type = in_msg_body~load_uint(8);
        slice jetton_wallet = in_msg_body~load_msg_addr();
        slice jetton_master = in_msg_body~load_msg_addr();
        int royalty = in_msg_body~load_coins();

        save_data(0, seller, sender_address, guarantor, amount, payment_type, jetton_wallet, jetton_master, royalty, 0);
        
        return ();
    }

    if (op == op::buy()) {
        (int tag, slice seller, slice buyer, slice guarantor, int amount, int payment_type, slice jetton_wallet, slice jetton_master, int royalty, int state) = load_data();
        
        throw_unless(74, state == 0); ;; Contract must be in initial state
        throw_unless(75, equal_slices(sender_address, buyer)); ;; Only buyer can call this
        
        if (payment_type == 0) { ;; TON payment
            throw_unless(76, msg_value >= amount + royalty); ;; Check if enough TON sent
        } else { ;; Jetton payment
            ;; Handle Jetton transfer here
            ;; This is a simplified version - in production you'd need proper Jetton transfer handling
            cell jetton_msg = begin_cell()
                .store_uint(op::transfer(), 32)
                .store_uint(query_id, 64)
                .store_coins(amount + royalty)
                .store_slice(my_address())
                .store_slice(sender_address)
                .store_coins(0)
                .store_uint(1, 1)
                .store_ref(null())
                .store_coins(0)
                .store_uint(0, 1)
                .end_cell();
                
            send_raw_message(jetton_msg, 1);
        }
        
        save_data(tag, seller, buyer, guarantor, amount, payment_type, jetton_wallet, jetton_master, royalty, 1);
        return ();
    }

    if (op == op::complete()) {
        (int tag, slice seller, slice buyer, slice guarantor, int amount, int payment_type, slice jetton_wallet, slice jetton_master, int royalty, int state) = load_data();
        
        throw_unless(77, state == 1); ;; Contract must be in payment received state
        throw_unless(78, equal_slices(sender_address, guarantor)); ;; Only guarantor can complete
        
        if (payment_type == 0) { ;; TON payment
            send_raw_message(begin_cell()
                .store_uint(op::transfer(), 32)
                .store_uint(query_id, 64)
                .store_coins(amount)
                .store_slice(seller)
                .store_uint(0, 1)
                .end_cell(), 1);
                
            send_raw_message(begin_cell()
                .store_uint(op::transfer(), 32)
                .store_uint(query_id, 64)
                .store_coins(royalty)
                .store_slice(guarantor)
                .store_uint(0, 1)
                .end_cell(), 1);
        } else { ;; Jetton payment
            ;; Handle Jetton transfer to seller and guarantor
            ;; This is a simplified version - in production you'd need proper Jetton transfer handling
            cell jetton_msg = begin_cell()
                .store_uint(op::transfer(), 32)
                .store_uint(query_id, 64)
                .store_coins(amount)
                .store_slice(seller)
                .store_slice(my_address())
                .store_coins(0)
                .store_uint(1, 1)
                .store_ref(null())
                .store_coins(0)
                .store_uint(0, 1)
                .end_cell();
                
            send_raw_message(jetton_msg, 1);
        }
        
        save_data(tag, seller, buyer, guarantor, amount, payment_type, jetton_wallet, jetton_master, royalty, 2);
        return ();
    }

    if (op == op::refund()) {
        (int tag, slice seller, slice buyer, slice guarantor, int amount, int payment_type, slice jetton_wallet, slice jetton_master, int royalty, int state) = load_data();
        
        throw_unless(79, state == 1); ;; Contract must be in payment received state
        throw_unless(80, equal_slices(sender_address, guarantor)); ;; Only guarantor can refund
        
        if (payment_type == 0) { ;; TON payment
            send_raw_message(begin_cell()
                .store_uint(op::transfer(), 32)
                .store_uint(query_id, 64)
                .store_coins(amount + royalty)
                .store_slice(buyer)
                .store_uint(0, 1)
                .end_cell(), 1);
        } else { ;; Jetton payment
            ;; Handle Jetton refund
            ;; This is a simplified version - in production you'd need proper Jetton transfer handling
            cell jetton_msg = begin_cell()
                .store_uint(op::transfer(), 32)
                .store_uint(query_id, 64)
                .store_coins(amount + royalty)
                .store_slice(buyer)
                .store_slice(my_address())
                .store_coins(0)
                .store_uint(1, 1)
                .store_ref(null())
                .store_coins(0)
                .store_uint(0, 1)
                .end_cell();
                
            send_raw_message(jetton_msg, 1);
        }
        
        save_data(tag, seller, buyer, guarantor, amount, payment_type, jetton_wallet, jetton_master, royalty, 3);
        return ();
    }

    throw(0xffff); ;; Unsupported operation
}
